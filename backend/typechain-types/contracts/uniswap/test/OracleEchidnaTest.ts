/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface OracleEchidnaTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "advanceTime"
      | "checkTimeWeightedAveragesAlwaysFitsType"
      | "checkTwoAdjacentObservationsTickCumulativeModTimeElapsedAlways0"
      | "echidna_AlwaysInitialized"
      | "echidna_canAlwaysObserve0IfInitialized"
      | "echidna_cardinalityAlwaysLteNext"
      | "echidna_indexAlwaysLtCardinality"
      | "grow"
      | "initialize"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "advanceTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTimeWeightedAveragesAlwaysFitsType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTwoAdjacentObservationsTickCumulativeModTimeElapsedAlways0",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_AlwaysInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_canAlwaysObserve0IfInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_cardinalityAlwaysLteNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_indexAlwaysLtCardinality",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "grow", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "advanceTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTimeWeightedAveragesAlwaysFitsType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTwoAdjacentObservationsTickCumulativeModTimeElapsedAlways0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_AlwaysInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_canAlwaysObserve0IfInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_cardinalityAlwaysLteNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_indexAlwaysLtCardinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
}

export interface OracleEchidnaTest extends BaseContract {
  connect(runner?: ContractRunner | null): OracleEchidnaTest;
  waitForDeployment(): Promise<this>;

  interface: OracleEchidnaTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  advanceTime: TypedContractMethod<[by: BigNumberish], [void], "nonpayable">;

  checkTimeWeightedAveragesAlwaysFitsType: TypedContractMethod<
    [secondsAgo: BigNumberish],
    [void],
    "view"
  >;

  checkTwoAdjacentObservationsTickCumulativeModTimeElapsedAlways0: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "view"
  >;

  echidna_AlwaysInitialized: TypedContractMethod<[], [boolean], "view">;

  echidna_canAlwaysObserve0IfInitialized: TypedContractMethod<
    [],
    [boolean],
    "view"
  >;

  echidna_cardinalityAlwaysLteNext: TypedContractMethod<[], [boolean], "view">;

  echidna_indexAlwaysLtCardinality: TypedContractMethod<[], [boolean], "view">;

  grow: TypedContractMethod<[cardinality: BigNumberish], [void], "nonpayable">;

  initialize: TypedContractMethod<
    [time: BigNumberish, tick: BigNumberish, liquidity: BigNumberish],
    [void],
    "nonpayable"
  >;

  update: TypedContractMethod<
    [advanceTimeBy: BigNumberish, tick: BigNumberish, liquidity: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "advanceTime"
  ): TypedContractMethod<[by: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkTimeWeightedAveragesAlwaysFitsType"
  ): TypedContractMethod<[secondsAgo: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "checkTwoAdjacentObservationsTickCumulativeModTimeElapsedAlways0"
  ): TypedContractMethod<[index: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "echidna_AlwaysInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "echidna_canAlwaysObserve0IfInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "echidna_cardinalityAlwaysLteNext"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "echidna_indexAlwaysLtCardinality"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "grow"
  ): TypedContractMethod<[cardinality: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [time: BigNumberish, tick: BigNumberish, liquidity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "update"
  ): TypedContractMethod<
    [advanceTimeBy: BigNumberish, tick: BigNumberish, liquidity: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
