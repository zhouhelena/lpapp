/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace OracleTest {
  export type UpdateParamsStruct = {
    advanceTimeBy: BigNumberish;
    tick: BigNumberish;
    liquidity: BigNumberish;
  };

  export type UpdateParamsStructOutput = [
    advanceTimeBy: bigint,
    tick: bigint,
    liquidity: bigint
  ] & { advanceTimeBy: bigint; tick: bigint; liquidity: bigint };

  export type InitializeParamsStruct = {
    time: BigNumberish;
    tick: BigNumberish;
    liquidity: BigNumberish;
  };

  export type InitializeParamsStructOutput = [
    time: bigint,
    tick: bigint,
    liquidity: bigint
  ] & { time: bigint; tick: bigint; liquidity: bigint };
}

export interface OracleTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "advanceTime"
      | "batchUpdate"
      | "cardinality"
      | "cardinalityNext"
      | "getGasCostOfObserve"
      | "grow"
      | "index"
      | "initialize"
      | "liquidity"
      | "observations"
      | "observe"
      | "tick"
      | "time"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "advanceTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdate",
    values: [OracleTest.UpdateParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cardinality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cardinalityNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfObserve",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "grow", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "index", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [OracleTest.InitializeParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "observations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "observe",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "tick", values?: undefined): string;
  encodeFunctionData(functionFragment: "time", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [OracleTest.UpdateParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "advanceTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cardinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cardinalityNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfObserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "observations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "observe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "time", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
}

export interface OracleTest extends BaseContract {
  connect(runner?: ContractRunner | null): OracleTest;
  waitForDeployment(): Promise<this>;

  interface: OracleTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  advanceTime: TypedContractMethod<[by: BigNumberish], [void], "nonpayable">;

  batchUpdate: TypedContractMethod<
    [params: OracleTest.UpdateParamsStruct[]],
    [void],
    "nonpayable"
  >;

  cardinality: TypedContractMethod<[], [bigint], "view">;

  cardinalityNext: TypedContractMethod<[], [bigint], "view">;

  getGasCostOfObserve: TypedContractMethod<
    [secondsAgos: BigNumberish[]],
    [bigint],
    "view"
  >;

  grow: TypedContractMethod<
    [_cardinalityNext: BigNumberish],
    [void],
    "nonpayable"
  >;

  index: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [params: OracleTest.InitializeParamsStruct],
    [void],
    "nonpayable"
  >;

  liquidity: TypedContractMethod<[], [bigint], "view">;

  observations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        blockTimestamp: bigint;
        tickCumulative: bigint;
        secondsPerLiquidityCumulativeX128: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  observe: TypedContractMethod<
    [secondsAgos: BigNumberish[]],
    [
      [bigint[], bigint[]] & {
        tickCumulatives: bigint[];
        secondsPerLiquidityCumulativeX128s: bigint[];
      }
    ],
    "view"
  >;

  tick: TypedContractMethod<[], [bigint], "view">;

  time: TypedContractMethod<[], [bigint], "view">;

  update: TypedContractMethod<
    [params: OracleTest.UpdateParamsStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "advanceTime"
  ): TypedContractMethod<[by: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchUpdate"
  ): TypedContractMethod<
    [params: OracleTest.UpdateParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cardinality"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cardinalityNext"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGasCostOfObserve"
  ): TypedContractMethod<[secondsAgos: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "grow"
  ): TypedContractMethod<
    [_cardinalityNext: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "index"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [params: OracleTest.InitializeParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "observations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        blockTimestamp: bigint;
        tickCumulative: bigint;
        secondsPerLiquidityCumulativeX128: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "observe"
  ): TypedContractMethod<
    [secondsAgos: BigNumberish[]],
    [
      [bigint[], bigint[]] & {
        tickCumulatives: bigint[];
        secondsPerLiquidityCumulativeX128s: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tick"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "update"
  ): TypedContractMethod<
    [params: OracleTest.UpdateParamsStruct],
    [void],
    "nonpayable"
  >;

  filters: {};
}
