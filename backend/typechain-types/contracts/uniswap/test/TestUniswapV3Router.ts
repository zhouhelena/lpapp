/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface TestUniswapV3RouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "swapForExact0Multi"
      | "swapForExact1Multi"
      | "uniswapV3SwapCallback"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SwapCallback"): EventFragment;

  encodeFunctionData(
    functionFragment: "swapForExact0Multi",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapForExact1Multi",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "swapForExact0Multi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapForExact1Multi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
}

export namespace SwapCallbackEvent {
  export type InputTuple = [
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish
  ];
  export type OutputTuple = [amount0Delta: bigint, amount1Delta: bigint];
  export interface OutputObject {
    amount0Delta: bigint;
    amount1Delta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestUniswapV3Router extends BaseContract {
  connect(runner?: ContractRunner | null): TestUniswapV3Router;
  waitForDeployment(): Promise<this>;

  interface: TestUniswapV3RouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  swapForExact0Multi: TypedContractMethod<
    [
      recipient: AddressLike,
      poolInput: AddressLike,
      poolOutput: AddressLike,
      amount0Out: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  swapForExact1Multi: TypedContractMethod<
    [
      recipient: AddressLike,
      poolInput: AddressLike,
      poolOutput: AddressLike,
      amount1Out: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  uniswapV3SwapCallback: TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "swapForExact0Multi"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      poolInput: AddressLike,
      poolOutput: AddressLike,
      amount0Out: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapForExact1Multi"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      poolInput: AddressLike,
      poolOutput: AddressLike,
      amount1Out: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapV3SwapCallback"
  ): TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SwapCallback"
  ): TypedContractEvent<
    SwapCallbackEvent.InputTuple,
    SwapCallbackEvent.OutputTuple,
    SwapCallbackEvent.OutputObject
  >;

  filters: {
    "SwapCallback(int256,int256)": TypedContractEvent<
      SwapCallbackEvent.InputTuple,
      SwapCallbackEvent.OutputTuple,
      SwapCallbackEvent.OutputObject
    >;
    SwapCallback: TypedContractEvent<
      SwapCallbackEvent.InputTuple,
      SwapCallbackEvent.OutputTuple,
      SwapCallbackEvent.OutputObject
    >;
  };
}
