/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MockTimeUniswapV3PoolDeployerInterface extends Interface {
  getFunction(nameOrSignature: "deploy" | "parameters"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PoolDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
}

export namespace PoolDeployedEvent {
  export type InputTuple = [pool: AddressLike];
  export type OutputTuple = [pool: string];
  export interface OutputObject {
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockTimeUniswapV3PoolDeployer extends BaseContract {
  connect(runner?: ContractRunner | null): MockTimeUniswapV3PoolDeployer;
  waitForDeployment(): Promise<this>;

  interface: MockTimeUniswapV3PoolDeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deploy: TypedContractMethod<
    [
      factory: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      fee: BigNumberish,
      tickSpacing: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  parameters: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, bigint] & {
        factory: string;
        token0: string;
        token1: string;
        fee: bigint;
        tickSpacing: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [
      factory: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      fee: BigNumberish,
      tickSpacing: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "parameters"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, bigint] & {
        factory: string;
        token0: string;
        token1: string;
        fee: bigint;
        tickSpacing: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "PoolDeployed"
  ): TypedContractEvent<
    PoolDeployedEvent.InputTuple,
    PoolDeployedEvent.OutputTuple,
    PoolDeployedEvent.OutputObject
  >;

  filters: {
    "PoolDeployed(address)": TypedContractEvent<
      PoolDeployedEvent.InputTuple,
      PoolDeployedEvent.OutputTuple,
      PoolDeployedEvent.OutputObject
    >;
    PoolDeployed: TypedContractEvent<
      PoolDeployedEvent.InputTuple,
      PoolDeployedEvent.OutputTuple,
      PoolDeployedEvent.OutputObject
    >;
  };
}
