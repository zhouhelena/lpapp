/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface TickBitmapTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bitmap"
      | "flipTick"
      | "getGasCostOfFlipTick"
      | "getGasCostOfNextInitializedTickWithinOneWord"
      | "isInitialized"
      | "nextInitializedTickWithinOneWord"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bitmap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flipTick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfFlipTick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfNextInitializedTickWithinOneWord",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextInitializedTickWithinOneWord",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "bitmap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flipTick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfFlipTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfNextInitializedTickWithinOneWord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextInitializedTickWithinOneWord",
    data: BytesLike
  ): Result;
}

export interface TickBitmapTest extends BaseContract {
  connect(runner?: ContractRunner | null): TickBitmapTest;
  waitForDeployment(): Promise<this>;

  interface: TickBitmapTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bitmap: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  flipTick: TypedContractMethod<[tick: BigNumberish], [void], "nonpayable">;

  getGasCostOfFlipTick: TypedContractMethod<
    [tick: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getGasCostOfNextInitializedTickWithinOneWord: TypedContractMethod<
    [tick: BigNumberish, lte: boolean],
    [bigint],
    "view"
  >;

  isInitialized: TypedContractMethod<[tick: BigNumberish], [boolean], "view">;

  nextInitializedTickWithinOneWord: TypedContractMethod<
    [tick: BigNumberish, lte: boolean],
    [[bigint, boolean] & { next: bigint; initialized: boolean }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bitmap"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "flipTick"
  ): TypedContractMethod<[tick: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getGasCostOfFlipTick"
  ): TypedContractMethod<[tick: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getGasCostOfNextInitializedTickWithinOneWord"
  ): TypedContractMethod<[tick: BigNumberish, lte: boolean], [bigint], "view">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[tick: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextInitializedTickWithinOneWord"
  ): TypedContractMethod<
    [tick: BigNumberish, lte: boolean],
    [[bigint, boolean] & { next: bigint; initialized: boolean }],
    "view"
  >;

  filters: {};
}
