/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SqrtPriceMathEchidnaTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAmount0DeltaEquivalency"
      | "getAmount0DeltaInvariants"
      | "getAmount0DeltaSignedInvariants"
      | "getAmount1DeltaInvariants"
      | "getAmount1DeltaSignedInvariants"
      | "getInRangeMintInvariants"
      | "getNextSqrtPriceFromAmount0RoundingUpInvariants"
      | "getNextSqrtPriceFromAmount1RoundingDownInvariants"
      | "getNextSqrtPriceFromInputInvariants"
      | "getNextSqrtPriceFromOutputInvariants"
      | "getOutOfRangeMintInvariants"
      | "mulDivRoundingUpInvariants"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAmount0DeltaEquivalency",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount0DeltaInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount0DeltaSignedInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount1DeltaInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount1DeltaSignedInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInRangeMintInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromAmount0RoundingUpInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromAmount1RoundingDownInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromInputInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromOutputInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutOfRangeMintInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulDivRoundingUpInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAmount0DeltaEquivalency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount0DeltaInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount0DeltaSignedInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount1DeltaInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount1DeltaSignedInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInRangeMintInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromAmount0RoundingUpInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromAmount1RoundingDownInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromInputInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromOutputInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutOfRangeMintInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulDivRoundingUpInvariants",
    data: BytesLike
  ): Result;
}

export interface SqrtPriceMathEchidnaTest extends BaseContract {
  connect(runner?: ContractRunner | null): SqrtPriceMathEchidnaTest;
  waitForDeployment(): Promise<this>;

  interface: SqrtPriceMathEchidnaTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAmount0DeltaEquivalency: TypedContractMethod<
    [
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean
    ],
    [void],
    "view"
  >;

  getAmount0DeltaInvariants: TypedContractMethod<
    [sqrtP: BigNumberish, sqrtQ: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;

  getAmount0DeltaSignedInvariants: TypedContractMethod<
    [sqrtP: BigNumberish, sqrtQ: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;

  getAmount1DeltaInvariants: TypedContractMethod<
    [sqrtP: BigNumberish, sqrtQ: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;

  getAmount1DeltaSignedInvariants: TypedContractMethod<
    [sqrtP: BigNumberish, sqrtQ: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;

  getInRangeMintInvariants: TypedContractMethod<
    [
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish
    ],
    [void],
    "view"
  >;

  getNextSqrtPriceFromAmount0RoundingUpInvariants: TypedContractMethod<
    [
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean
    ],
    [void],
    "view"
  >;

  getNextSqrtPriceFromAmount1RoundingDownInvariants: TypedContractMethod<
    [
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean
    ],
    [void],
    "view"
  >;

  getNextSqrtPriceFromInputInvariants: TypedContractMethod<
    [
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean
    ],
    [void],
    "view"
  >;

  getNextSqrtPriceFromOutputInvariants: TypedContractMethod<
    [
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean
    ],
    [void],
    "view"
  >;

  getOutOfRangeMintInvariants: TypedContractMethod<
    [sqrtA: BigNumberish, sqrtB: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;

  mulDivRoundingUpInvariants: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, z: BigNumberish],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAmount0DeltaEquivalency"
  ): TypedContractMethod<
    [
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmount0DeltaInvariants"
  ): TypedContractMethod<
    [sqrtP: BigNumberish, sqrtQ: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmount0DeltaSignedInvariants"
  ): TypedContractMethod<
    [sqrtP: BigNumberish, sqrtQ: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmount1DeltaInvariants"
  ): TypedContractMethod<
    [sqrtP: BigNumberish, sqrtQ: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmount1DeltaSignedInvariants"
  ): TypedContractMethod<
    [sqrtP: BigNumberish, sqrtQ: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInRangeMintInvariants"
  ): TypedContractMethod<
    [
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextSqrtPriceFromAmount0RoundingUpInvariants"
  ): TypedContractMethod<
    [
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextSqrtPriceFromAmount1RoundingDownInvariants"
  ): TypedContractMethod<
    [
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextSqrtPriceFromInputInvariants"
  ): TypedContractMethod<
    [
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextSqrtPriceFromOutputInvariants"
  ): TypedContractMethod<
    [
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOutOfRangeMintInvariants"
  ): TypedContractMethod<
    [sqrtA: BigNumberish, sqrtB: BigNumberish, liquidity: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "mulDivRoundingUpInvariants"
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, z: BigNumberish],
    [void],
    "view"
  >;

  filters: {};
}
