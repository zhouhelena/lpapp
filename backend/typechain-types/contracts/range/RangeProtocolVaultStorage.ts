/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RangeProtocolVaultStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "factory"
      | "inThePosition"
      | "lowerTick"
      | "managerBalance0"
      | "managerBalance1"
      | "managingFee"
      | "mintStarted"
      | "performanceFee"
      | "pool"
      | "tickSpacing"
      | "token0"
      | "token1"
      | "upperTick"
      | "userVaults"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inThePosition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lowerTick", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "managerBalance0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerBalance1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "upperTick", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userVaults",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inThePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lowerTick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerBalance0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerBalance1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upperTick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export interface RangeProtocolVaultStorage extends BaseContract {
  connect(runner?: ContractRunner | null): RangeProtocolVaultStorage;
  waitForDeployment(): Promise<this>;

  interface: RangeProtocolVaultStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  factory: TypedContractMethod<[], [string], "view">;

  inThePosition: TypedContractMethod<[], [boolean], "view">;

  lowerTick: TypedContractMethod<[], [bigint], "view">;

  managerBalance0: TypedContractMethod<[], [bigint], "view">;

  managerBalance1: TypedContractMethod<[], [bigint], "view">;

  managingFee: TypedContractMethod<[], [bigint], "view">;

  mintStarted: TypedContractMethod<[], [boolean], "view">;

  performanceFee: TypedContractMethod<[], [bigint], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  tickSpacing: TypedContractMethod<[], [bigint], "view">;

  token0: TypedContractMethod<[], [string], "view">;

  token1: TypedContractMethod<[], [string], "view">;

  upperTick: TypedContractMethod<[], [bigint], "view">;

  userVaults: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        exists: boolean;
        token0: bigint;
        token1: bigint;
      }
    ],
    "view"
  >;

  users: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "inThePosition"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lowerTick"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managerBalance0"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managerBalance1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "performanceFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tickSpacing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upperTick"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userVaults"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        exists: boolean;
        token0: bigint;
        token1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  filters: {};
}
