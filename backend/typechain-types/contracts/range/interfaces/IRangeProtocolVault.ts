/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IRangeProtocolVault {
  export type UserVaultInfoStruct = {
    user: AddressLike;
    token0: BigNumberish;
    token1: BigNumberish;
  };

  export type UserVaultInfoStructOutput = [
    user: string,
    token0: bigint,
    token1: bigint
  ] & { user: string; token0: bigint; token1: bigint };
}

export interface IRangeProtocolVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "burn"
      | "getCurrentFees"
      | "getMintAmounts"
      | "getPositionID"
      | "getUnderlyingBalances"
      | "getUserVaults"
      | "initialize"
      | "mint"
      | "removeLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Burned"
      | "FeesEarned"
      | "FeesUpdated"
      | "InThePositionStatusSet"
      | "LiquidityAdded"
      | "LiquidityRemoved"
      | "MintStarted"
      | "MintedPosition"
      | "Swapped"
      | "TicksSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintAmounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVaults",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [[BigNumberish, BigNumberish]]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
}

export namespace BurnedEvent {
  export type InputTuple = [
    receiver: AddressLike,
    burnAmount: BigNumberish,
    amount0Out: BigNumberish,
    amount1Out: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    burnAmount: bigint,
    amount0Out: bigint,
    amount1Out: bigint
  ];
  export interface OutputObject {
    receiver: string;
    burnAmount: bigint;
    amount0Out: bigint;
    amount1Out: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesEarnedEvent {
  export type InputTuple = [
    feesEarned0: BigNumberish,
    feesEarned1: BigNumberish
  ];
  export type OutputTuple = [feesEarned0: bigint, feesEarned1: bigint];
  export interface OutputObject {
    feesEarned0: bigint;
    feesEarned1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [
    managingFee: BigNumberish,
    performanceFee: BigNumberish
  ];
  export type OutputTuple = [managingFee: bigint, performanceFee: bigint];
  export interface OutputObject {
    managingFee: bigint;
    performanceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InThePositionStatusSetEvent {
  export type InputTuple = [inThePosition: boolean];
  export type OutputTuple = [inThePosition: boolean];
  export interface OutputObject {
    inThePosition: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    liquidityMinted: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amount0In: BigNumberish,
    amount1In: BigNumberish
  ];
  export type OutputTuple = [
    liquidityMinted: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    amount0In: bigint,
    amount1In: bigint
  ];
  export interface OutputObject {
    liquidityMinted: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    amount0In: bigint;
    amount1In: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [
    liquidityRemoved: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amount0Out: BigNumberish,
    amount1Out: BigNumberish
  ];
  export type OutputTuple = [
    liquidityRemoved: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    amount0Out: bigint,
    amount1Out: bigint
  ];
  export interface OutputObject {
    liquidityRemoved: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    amount0Out: bigint;
    amount1Out: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedPositionEvent {
  export type InputTuple = [
    receiver: AddressLike,
    mintAmount: BigNumberish,
    amount0In: BigNumberish,
    amount1In: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    mintAmount: bigint,
    amount0In: bigint,
    amount1In: bigint
  ];
  export interface OutputObject {
    receiver: string;
    mintAmount: bigint;
    amount0In: bigint;
    amount1In: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwappedEvent {
  export type InputTuple = [
    zeroForOne: boolean,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    zeroForOne: boolean,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    zeroForOne: boolean;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicksSetEvent {
  export type InputTuple = [lowerTick: BigNumberish, upperTick: BigNumberish];
  export type OutputTuple = [lowerTick: bigint, upperTick: bigint];
  export interface OutputObject {
    lowerTick: bigint;
    upperTick: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRangeProtocolVault extends BaseContract {
  connect(runner?: ContractRunner | null): IRangeProtocolVault;
  waitForDeployment(): Promise<this>;

  interface: IRangeProtocolVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  burn: TypedContractMethod<
    [burnAmount: BigNumberish, minAmountsOut: [BigNumberish, BigNumberish]],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  getCurrentFees: TypedContractMethod<
    [],
    [[bigint, bigint] & { fee0: bigint; fee1: bigint }],
    "view"
  >;

  getMintAmounts: TypedContractMethod<
    [amount0Max: BigNumberish, amount1Max: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        mintAmount: bigint;
      }
    ],
    "view"
  >;

  getPositionID: TypedContractMethod<[], [string], "view">;

  getUnderlyingBalances: TypedContractMethod<
    [],
    [[bigint, bigint] & { amount0Current: bigint; amount1Current: bigint }],
    "view"
  >;

  getUserVaults: TypedContractMethod<
    [fromIdx: BigNumberish, toIdx: BigNumberish],
    [IRangeProtocolVault.UserVaultInfoStructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [_pool: AddressLike, _tickSpacing: BigNumberish, _manager: AddressLike],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [mintAmount: BigNumberish, maxAmountsIn: [BigNumberish, BigNumberish]],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  removeLiquidity: TypedContractMethod<
    [minAmountsOut: [BigNumberish, BigNumberish]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [burnAmount: BigNumberish, minAmountsOut: [BigNumberish, BigNumberish]],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCurrentFees"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { fee0: bigint; fee1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMintAmounts"
  ): TypedContractMethod<
    [amount0Max: BigNumberish, amount1Max: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        mintAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUnderlyingBalances"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { amount0Current: bigint; amount1Current: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserVaults"
  ): TypedContractMethod<
    [fromIdx: BigNumberish, toIdx: BigNumberish],
    [IRangeProtocolVault.UserVaultInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_pool: AddressLike, _tickSpacing: BigNumberish, _manager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [mintAmount: BigNumberish, maxAmountsIn: [BigNumberish, BigNumberish]],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [minAmountsOut: [BigNumberish, BigNumberish]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Burned"
  ): TypedContractEvent<
    BurnedEvent.InputTuple,
    BurnedEvent.OutputTuple,
    BurnedEvent.OutputObject
  >;
  getEvent(
    key: "FeesEarned"
  ): TypedContractEvent<
    FeesEarnedEvent.InputTuple,
    FeesEarnedEvent.OutputTuple,
    FeesEarnedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "InThePositionStatusSet"
  ): TypedContractEvent<
    InThePositionStatusSetEvent.InputTuple,
    InThePositionStatusSetEvent.OutputTuple,
    InThePositionStatusSetEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MintStarted"
  ): TypedContractEvent<
    MintStartedEvent.InputTuple,
    MintStartedEvent.OutputTuple,
    MintStartedEvent.OutputObject
  >;
  getEvent(
    key: "MintedPosition"
  ): TypedContractEvent<
    MintedPositionEvent.InputTuple,
    MintedPositionEvent.OutputTuple,
    MintedPositionEvent.OutputObject
  >;
  getEvent(
    key: "Swapped"
  ): TypedContractEvent<
    SwappedEvent.InputTuple,
    SwappedEvent.OutputTuple,
    SwappedEvent.OutputObject
  >;
  getEvent(
    key: "TicksSet"
  ): TypedContractEvent<
    TicksSetEvent.InputTuple,
    TicksSetEvent.OutputTuple,
    TicksSetEvent.OutputObject
  >;

  filters: {
    "Burned(address,uint256,uint256,uint256)": TypedContractEvent<
      BurnedEvent.InputTuple,
      BurnedEvent.OutputTuple,
      BurnedEvent.OutputObject
    >;
    Burned: TypedContractEvent<
      BurnedEvent.InputTuple,
      BurnedEvent.OutputTuple,
      BurnedEvent.OutputObject
    >;

    "FeesEarned(uint256,uint256)": TypedContractEvent<
      FeesEarnedEvent.InputTuple,
      FeesEarnedEvent.OutputTuple,
      FeesEarnedEvent.OutputObject
    >;
    FeesEarned: TypedContractEvent<
      FeesEarnedEvent.InputTuple,
      FeesEarnedEvent.OutputTuple,
      FeesEarnedEvent.OutputObject
    >;

    "FeesUpdated(uint16,uint16)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "InThePositionStatusSet(bool)": TypedContractEvent<
      InThePositionStatusSetEvent.InputTuple,
      InThePositionStatusSetEvent.OutputTuple,
      InThePositionStatusSetEvent.OutputObject
    >;
    InThePositionStatusSet: TypedContractEvent<
      InThePositionStatusSetEvent.InputTuple,
      InThePositionStatusSetEvent.OutputTuple,
      InThePositionStatusSetEvent.OutputObject
    >;

    "LiquidityAdded(uint256,int24,int24,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(uint256,int24,int24,uint256,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "MintStarted()": TypedContractEvent<
      MintStartedEvent.InputTuple,
      MintStartedEvent.OutputTuple,
      MintStartedEvent.OutputObject
    >;
    MintStarted: TypedContractEvent<
      MintStartedEvent.InputTuple,
      MintStartedEvent.OutputTuple,
      MintStartedEvent.OutputObject
    >;

    "MintedPosition(address,uint256,uint256,uint256)": TypedContractEvent<
      MintedPositionEvent.InputTuple,
      MintedPositionEvent.OutputTuple,
      MintedPositionEvent.OutputObject
    >;
    MintedPosition: TypedContractEvent<
      MintedPositionEvent.InputTuple,
      MintedPositionEvent.OutputTuple,
      MintedPositionEvent.OutputObject
    >;

    "Swapped(bool,int256,int256)": TypedContractEvent<
      SwappedEvent.InputTuple,
      SwappedEvent.OutputTuple,
      SwappedEvent.OutputObject
    >;
    Swapped: TypedContractEvent<
      SwappedEvent.InputTuple,
      SwappedEvent.OutputTuple,
      SwappedEvent.OutputObject
    >;

    "TicksSet(int24,int24)": TypedContractEvent<
      TicksSetEvent.InputTuple,
      TicksSetEvent.OutputTuple,
      TicksSetEvent.OutputObject
    >;
    TicksSet: TypedContractEvent<
      TicksSetEvent.InputTuple,
      TicksSetEvent.OutputTuple,
      TicksSetEvent.OutputObject
    >;
  };
}
