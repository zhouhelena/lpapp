/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IRangeProtocolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "createVault" | "upgradeVault" | "upgradeVaults"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "VaultCreated" | "VaultImplUpgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createVault",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeVault",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeVaults",
    values: [AddressLike[], AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeVaults",
    data: BytesLike
  ): Result;
}

export namespace VaultCreatedEvent {
  export type InputTuple = [uniPool: AddressLike, vault: AddressLike];
  export type OutputTuple = [uniPool: string, vault: string];
  export interface OutputObject {
    uniPool: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultImplUpgradedEvent {
  export type InputTuple = [uniPool: AddressLike, vault: AddressLike];
  export type OutputTuple = [uniPool: string, vault: string];
  export interface OutputObject {
    uniPool: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRangeProtocolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IRangeProtocolFactory;
  waitForDeployment(): Promise<this>;

  interface: IRangeProtocolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createVault: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      fee: BigNumberish,
      implementation: AddressLike,
      configData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  upgradeVault: TypedContractMethod<
    [_vault: AddressLike, _impl: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeVaults: TypedContractMethod<
    [_vaults: AddressLike[], _impls: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createVault"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      fee: BigNumberish,
      implementation: AddressLike,
      configData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeVault"
  ): TypedContractMethod<
    [_vault: AddressLike, _impl: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeVaults"
  ): TypedContractMethod<
    [_vaults: AddressLike[], _impls: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "VaultCreated"
  ): TypedContractEvent<
    VaultCreatedEvent.InputTuple,
    VaultCreatedEvent.OutputTuple,
    VaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultImplUpgraded"
  ): TypedContractEvent<
    VaultImplUpgradedEvent.InputTuple,
    VaultImplUpgradedEvent.OutputTuple,
    VaultImplUpgradedEvent.OutputObject
  >;

  filters: {
    "VaultCreated(address,address)": TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
    VaultCreated: TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;

    "VaultImplUpgraded(address,address)": TypedContractEvent<
      VaultImplUpgradedEvent.InputTuple,
      VaultImplUpgradedEvent.OutputTuple,
      VaultImplUpgradedEvent.OutputObject
    >;
    VaultImplUpgraded: TypedContractEvent<
      VaultImplUpgradedEvent.InputTuple,
      VaultImplUpgradedEvent.OutputTuple,
      VaultImplUpgradedEvent.OutputObject
    >;
  };
}
