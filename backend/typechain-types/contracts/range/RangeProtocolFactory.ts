/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RangeProtocolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INIT_SELECTOR"
      | "UPGRADE_SELECTOR"
      | "createVault"
      | "factory"
      | "getVaultAddresses"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "upgradeVault"
      | "upgradeVaults"
      | "vaultCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "VaultCreated"
      | "VaultImplUpgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "INIT_SELECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_SELECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultAddresses",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeVault",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeVaults",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "INIT_SELECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_SELECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultCount", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCreatedEvent {
  export type InputTuple = [uniPool: AddressLike, vault: AddressLike];
  export type OutputTuple = [uniPool: string, vault: string];
  export interface OutputObject {
    uniPool: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultImplUpgradedEvent {
  export type InputTuple = [uniPool: AddressLike, vault: AddressLike];
  export type OutputTuple = [uniPool: string, vault: string];
  export interface OutputObject {
    uniPool: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RangeProtocolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RangeProtocolFactory;
  waitForDeployment(): Promise<this>;

  interface: RangeProtocolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INIT_SELECTOR: TypedContractMethod<[], [string], "view">;

  UPGRADE_SELECTOR: TypedContractMethod<[], [string], "view">;

  createVault: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      fee: BigNumberish,
      implementation: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  getVaultAddresses: TypedContractMethod<
    [startIdx: BigNumberish, endIdx: BigNumberish],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeVault: TypedContractMethod<
    [_vault: AddressLike, _impl: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeVaults: TypedContractMethod<
    [_vaults: AddressLike[], _impls: AddressLike[]],
    [void],
    "nonpayable"
  >;

  vaultCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INIT_SELECTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_SELECTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createVault"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      fee: BigNumberish,
      implementation: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVaultAddresses"
  ): TypedContractMethod<
    [startIdx: BigNumberish, endIdx: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeVault"
  ): TypedContractMethod<
    [_vault: AddressLike, _impl: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeVaults"
  ): TypedContractMethod<
    [_vaults: AddressLike[], _impls: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vaultCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VaultCreated"
  ): TypedContractEvent<
    VaultCreatedEvent.InputTuple,
    VaultCreatedEvent.OutputTuple,
    VaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultImplUpgraded"
  ): TypedContractEvent<
    VaultImplUpgradedEvent.InputTuple,
    VaultImplUpgradedEvent.OutputTuple,
    VaultImplUpgradedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VaultCreated(address,address)": TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
    VaultCreated: TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;

    "VaultImplUpgraded(address,address)": TypedContractEvent<
      VaultImplUpgradedEvent.InputTuple,
      VaultImplUpgradedEvent.OutputTuple,
      VaultImplUpgradedEvent.OutputObject
    >;
    VaultImplUpgraded: TypedContractEvent<
      VaultImplUpgradedEvent.InputTuple,
      VaultImplUpgradedEvent.OutputTuple,
      VaultImplUpgradedEvent.OutputObject
    >;
  };
}
