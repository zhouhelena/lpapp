/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Receiver,
  ReceiverInterface,
} from "../../../contracts/ccip/Receiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "_usdc",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "InvalidRouter",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "sourceChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensReceived",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastReceivedMessageDetails",
    outputs: [
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620010b3380380620010b38339818101604052810190620000379190620001d7565b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401620000a4919062000244565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000261565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019f8262000172565b9050919050565b620001b18162000192565b8114620001bd57600080fd5b50565b600081519050620001d181620001a6565b92915050565b600080600060608486031215620001f357620001f26200016d565b5b60006200020386828701620001c0565b93505060206200021686828701620001c0565b92505060406200022986828701620001c0565b9150509250925092565b6200023e8162000192565b82525050565b60006020820190506200025b600083018462000233565b92915050565b608051610e2f62000284600039600081816101f101526102980152610e2f6000f3fe6080604052600436106100435760003560e01c806301ffc9a71461004f578063263596a51461008c57806385572ffb146100b8578063b0f479a1146100e15761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100766004803603810190610071919061054d565b61010c565b6040516100839190610595565b60405180910390f35b34801561009857600080fd5b506100a16101de565b6040516100af9291906105e2565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da919061062f565b6101ef565b005b3480156100ed57600080fd5b506100f6610294565b60405161010391906106b9565b60405180910390f35b60007f85572ffb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101d757507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600080600054600154915091509091565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027f57336040517fd7f7333400000000000000000000000000000000000000000000000000000000815260040161027691906106b9565b60405180910390fd5b6102918161028c90610ae0565b6102bc565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b806000015160008190555080606001518060200190518101906102df9190610b08565b600181905550806020015167ffffffffffffffff1681600001517fd75fddd54cb885def98dea3f1d7badb7b04282612d15f1c6613eaeb9a7d7adaf83604001518060200190518101906103329190610b73565b846060015180602001905181019061034a9190610b08565b604051610358929190610bff565b60405180910390a3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001546040518363ffffffff1660e01b81526004016103e1929190610c28565b6020604051808303816000875af1158015610400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104249190610c7d565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b341ee9f603c6040518060400160405280600154815260200160008152506040518363ffffffff1660e01b815260040161049a929190610d90565b60408051808303816000875af11580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc9190610db9565b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61052a816104f5565b811461053557600080fd5b50565b60008135905061054781610521565b92915050565b600060208284031215610563576105626104eb565b5b600061057184828501610538565b91505092915050565b60008115159050919050565b61058f8161057a565b82525050565b60006020820190506105aa6000830184610586565b92915050565b6000819050919050565b6105c3816105b0565b82525050565b6000819050919050565b6105dc816105c9565b82525050565b60006040820190506105f760008301856105ba565b61060460208301846105d3565b9392505050565b600080fd5b600060a082840312156106265761062561060b565b5b81905092915050565b600060208284031215610645576106446104eb565b5b600082013567ffffffffffffffff811115610663576106626104f0565b5b61066f84828501610610565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106a382610678565b9050919050565b6106b381610698565b82525050565b60006020820190506106ce60008301846106aa565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610722826106d9565b810181811067ffffffffffffffff82111715610741576107406106ea565b5b80604052505050565b60006107546104e1565b90506107608282610719565b919050565b600080fd5b610773816105b0565b811461077e57600080fd5b50565b6000813590506107908161076a565b92915050565b600067ffffffffffffffff82169050919050565b6107b381610796565b81146107be57600080fd5b50565b6000813590506107d0816107aa565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156107fb576107fa6106ea565b5b610804826106d9565b9050602081019050919050565b82818337600083830152505050565b600061083361082e846107e0565b61074a565b90508281526020810184848401111561084f5761084e6107db565b5b61085a848285610811565b509392505050565b600082601f830112610877576108766107d6565b5b8135610887848260208601610820565b91505092915050565b600067ffffffffffffffff8211156108ab576108aa6106ea565b5b602082029050602081019050919050565b600080fd5b6108ca81610698565b81146108d557600080fd5b50565b6000813590506108e7816108c1565b92915050565b6108f6816105c9565b811461090157600080fd5b50565b600081359050610913816108ed565b92915050565b60006040828403121561092f5761092e6106d4565b5b610939604061074a565b90506000610949848285016108d8565b600083015250602061095d84828501610904565b60208301525092915050565b600061097c61097784610890565b61074a565b9050808382526020820190506040840283018581111561099f5761099e6108bc565b5b835b818110156109c857806109b48882610919565b8452602084019350506040810190506109a1565b5050509392505050565b600082601f8301126109e7576109e66107d6565b5b81356109f7848260208601610969565b91505092915050565b600060a08284031215610a1657610a156106d4565b5b610a2060a061074a565b90506000610a3084828501610781565b6000830152506020610a44848285016107c1565b602083015250604082013567ffffffffffffffff811115610a6857610a67610765565b5b610a7484828501610862565b604083015250606082013567ffffffffffffffff811115610a9857610a97610765565b5b610aa484828501610862565b606083015250608082013567ffffffffffffffff811115610ac857610ac7610765565b5b610ad4848285016109d2565b60808301525092915050565b6000610aec3683610a00565b9050919050565b600081519050610b02816108ed565b92915050565b600060208284031215610b1e57610b1d6104eb565b5b6000610b2c84828501610af3565b91505092915050565b6000610b4082610678565b9050919050565b610b5081610b35565b8114610b5b57600080fd5b50565b600081519050610b6d81610b47565b92915050565b600060208284031215610b8957610b886104eb565b5b6000610b9784828501610b5e565b91505092915050565b6000819050919050565b6000610bc5610bc0610bbb84610678565b610ba0565b610678565b9050919050565b6000610bd782610baa565b9050919050565b6000610be982610bcc565b9050919050565b610bf981610bde565b82525050565b6000604082019050610c146000830185610bf0565b610c2160208301846105d3565b9392505050565b6000604082019050610c3d60008301856106aa565b610c4a60208301846105d3565b9392505050565b610c5a8161057a565b8114610c6557600080fd5b50565b600081519050610c7781610c51565b92915050565b600060208284031215610c9357610c926104eb565b5b6000610ca184828501610c68565b91505092915050565b6000819050919050565b6000610ccf610cca610cc584610caa565b610ba0565b6105c9565b9050919050565b610cdf81610cb4565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b610d0e816105c9565b82525050565b6000610d208383610d05565b60208301905092915050565b6000602082019050919050565b610d4281610ce5565b610d4c8184610cf0565b9250610d5782610cfb565b8060005b83811015610d88578151610d6f8782610d14565b9650610d7a83610d2c565b925050600181019050610d5b565b505050505050565b6000606082019050610da56000830185610cd6565b610db26020830184610d39565b9392505050565b60008060408385031215610dd057610dcf6104eb565b5b6000610dde85828601610af3565b9250506020610def85828601610af3565b915050925092905056fea26469706673582212200ef1a299b717ef7482ff65a8cf64479ac6ea71bdcbf29a606515203697ab305264736f6c63430008140033";

type ReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Receiver__factory extends ContractFactory {
  constructor(...args: ReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    router: AddressLike,
    _usdc: AddressLike,
    _vault: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(router, _usdc, _vault, overrides || {});
  }
  override deploy(
    router: AddressLike,
    _usdc: AddressLike,
    _vault: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(router, _usdc, _vault, overrides || {}) as Promise<
      Receiver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Receiver__factory {
    return super.connect(runner) as Receiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReceiverInterface {
    return new Interface(_abi) as ReceiverInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Receiver {
    return new Contract(address, _abi, runner) as unknown as Receiver;
  }
}
