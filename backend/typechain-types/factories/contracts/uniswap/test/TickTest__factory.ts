/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  TickTest,
  TickTestInterface,
} from "../../../../contracts/uniswap/test/TickTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "clear",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulativeX128",
        type: "uint160",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint32",
        name: "time",
        type: "uint32",
      },
    ],
    name: "cross",
    outputs: [
      {
        internalType: "int128",
        name: "liquidityNet",
        type: "int128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickCurrent",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
    ],
    name: "getFeeGrowthInside",
    outputs: [
      {
        internalType: "uint256",
        name: "feeGrowthInside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthInside1X128",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside0X128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside1X128",
            type: "uint256",
          },
          {
            internalType: "int56",
            name: "tickCumulativeOutside",
            type: "int56",
          },
          {
            internalType: "uint160",
            name: "secondsPerLiquidityOutsideX128",
            type: "uint160",
          },
          {
            internalType: "uint32",
            name: "secondsOutside",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "initialized",
            type: "bool",
          },
        ],
        internalType: "struct Tick.Info",
        name: "info",
        type: "tuple",
      },
    ],
    name: "setTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24",
      },
    ],
    name: "tickSpacingToMaxLiquidityPerTick",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    name: "ticks",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidityGross",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "liquidityNet",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside1X128",
        type: "uint256",
      },
      {
        internalType: "int56",
        name: "tickCumulativeOutside",
        type: "int56",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityOutsideX128",
        type: "uint160",
      },
      {
        internalType: "uint32",
        name: "secondsOutside",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickCurrent",
        type: "int24",
      },
      {
        internalType: "int128",
        name: "liquidityDelta",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulativeX128",
        type: "uint160",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint32",
        name: "time",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "upper",
        type: "bool",
      },
      {
        internalType: "uint128",
        name: "maxLiquidity",
        type: "uint128",
      },
    ],
    name: "update",
    outputs: [
      {
        internalType: "bool",
        name: "flipped",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c7c806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806382c66f871161005b57806382c66f87146100e1578063b613524a14610101578063df33fa8814610114578063f30dba93146101345761007d565b806320b90da91461008257806330e3ff4c146100ab5780635cb083ce146100cc575b600080fd5b61009561009036600461097a565b61015b565b6040516100a29190610bb3565b60405180910390f35b6100be6100b9366004610a25565b61017f565b6040516100a2929190610c38565b6100df6100da366004610a79565b61019e565b005b6100f46100ef366004610959565b6102d4565b6040516100a29190610bcc565b6100df61010f366004610959565b6102e7565b610127610122366004610b4e565b6102f5565b6040516100a29190610bbe565b610147610142366004610959565b610311565b6040516100a2989796959493929190610be0565b6000610170818c8c8c8c8c8c8c8c8c8c61037f565b9b9a5050505050505050505050565b60008061019081888888888861058d565b915091509550959350505050565b600291820b820b600090815260208181526040918290208351815492850151600f0b6001600160801b03908116600160801b029181166fffffffffffffffffffffffffffffffff199094169390931790921691909117815590820151600182015560608201519281019290925560808101516003909201805460a083015160c084015160e0909401511515600160f81b027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff909516600160d81b0263ffffffff60d81b196001600160a01b03909316670100000000000000027fffffffffff0000000000000000000000000000000000000000ffffffffffffff60069890980b66ffffffffffffff1666ffffffffffffff19909516949094179690961692909217169390931791909116919091179055565b60006102df82610639565b90505b919050565b6102f26000826106a3565b50565b6000610306818888888888886106cf565b979650505050505050565b60006020819052908152604090208054600182015460028301546003909301546001600160801b03831693600160801b909304600f0b9290600681900b9067010000000000000081046001600160a01b031690600160d81b810463ffffffff1690600160f81b900460ff1688565b60028a810b900b600090815260208c90526040812080546001600160801b0316826103aa828d6107a2565b9050846001600160801b0316816001600160801b03161115610413576040805162461bcd60e51b815260206004820152600260248201527f4c4f000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160801b0382811615908216158114159450156104e9578c60020b8e60020b136104b957600183018b9055600283018a90556003830180547fffffffffff0000000000000000000000000000000000000000ffffffffffffff166701000000000000006001600160a01b038c16021766ffffffffffffff191666ffffffffffffff60068b900b161763ffffffff60d81b1916600160d81b63ffffffff8a16021790555b6003830180547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160f81b1790555b82546fffffffffffffffffffffffffffffffff19166001600160801b0382161783558561053b5782546105369061053190600160801b9004600f90810b810b908f900b610894565b6108aa565b61055c565b825461055c9061053190600160801b9004600f90810b810b908f900b6108bb565b8354600f9190910b6001600160801b03908116600160801b0291161790925550909c9b505050505050505050505050565b600285810b80820b60009081526020899052604080822088850b850b83529082209193849391929184918291908a900b126105d3575050600182015460028301546105e6565b8360010154880391508360020154870390505b6000808b60020b8b60020b12156106085750506001830154600284015461061b565b84600101548a0391508460020154890390505b92909803979097039b96909503949094039850939650505050505050565b60008082600281900b620d89e7198161064e57fe5b05029050600083600281900b620d89e88161066557fe5b0502905060008460020b83830360020b8161067c57fe5b0560010190508062ffffff166001600160801b0380168161069957fe5b0495945050505050565b600290810b810b6000908152602092909252604082208281556001810183905590810182905560030155565b600295860b860b60009081526020979097526040909620600181018054909503909455938301805490920390915560038201805463ffffffff600160d81b6001600160a01b036701000000000000008085048216909603169094027fffffffffff0000000000000000000000000000000000000000ffffffffffffff90921691909117600681810b90960390950b66ffffffffffffff1666ffffffffffffff199095169490941782810485169095039093160263ffffffff60d81b1990931692909217905554600160801b9004600f0b90565b60008082600f0b121561082257826001600160801b03168260000384039150816001600160801b03161061081d576040805162461bcd60e51b815260206004820152600260248201527f4c53000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61088e565b826001600160801b03168284019150816001600160801b0316101561088e576040805162461bcd60e51b815260206004820152600260248201527f4c41000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b92915050565b8181018281121560008312151461088e57600080fd5b80600f81900b81146102e257600080fd5b8082038281131560008312151461088e57600080fd5b803580151581146102e257600080fd5b8035600f81900b81146102e257600080fd5b8035600281900b81146102e257600080fd5b8035600681900b81146102e257600080fd5b80356001600160801b03811681146102e257600080fd5b80356001600160a01b03811681146102e257600080fd5b803563ffffffff811681146102e257600080fd5b60006020828403121561096a578081fd5b610973826108f3565b9392505050565b6000806000806000806000806000806101408b8d031215610999578586fd5b6109a28b6108f3565b99506109b060208c016108f3565b98506109be60408c016108e1565b975060608b0135965060808b013595506109da60a08c0161092e565b94506109e860c08c01610905565b93506109f660e08c01610945565b9250610a056101008c016108d1565b9150610a146101208c01610917565b90509295989b9194979a5092959850565b600080600080600060a08688031215610a3c578081fd5b610a45866108f3565b9450610a53602087016108f3565b9350610a61604087016108f3565b94979396509394606081013594506080013592915050565b600080828403610120811215610a8d578283fd5b610a96846108f3565b925061010080601f1983011215610aab578283fd5b604051915080820182811067ffffffffffffffff82111715610ac957fe5b604052610ad860208601610917565b8252610ae6604086016108e1565b60208301526060850135604083015260808501356060830152610b0b60a08601610905565b6080830152610b1c60c0860161092e565b60a0830152610b2d60e08601610945565b60c0830152610b3d8186016108d1565b60e083015250809150509250929050565b60008060008060008060c08789031215610b66578182fd5b610b6f876108f3565b95506020870135945060408701359350610b8b6060880161092e565b9250610b9960808801610905565b9150610ba760a08801610945565b90509295509295509295565b901515815260200190565b600f9190910b815260200190565b6001600160801b0391909116815260200190565b6001600160801b03989098168852600f9690960b60208801526040870194909452606086019290925260060b60808501526001600160a01b031660a084015263ffffffff1660c0830152151560e08201526101000190565b91825260208201526040019056fea26469706673582212203a66647cfe01d5f9acc73f7fb940508dde356b0eac5c17fb49d6274b15f5f27564736f6c63430007060033";

type TickTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickTest__factory extends ContractFactory {
  constructor(...args: TickTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TickTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TickTest__factory {
    return super.connect(runner) as TickTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickTestInterface {
    return new Interface(_abi) as TickTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TickTest {
    return new Contract(address, _abi, runner) as unknown as TickTest;
  }
}
