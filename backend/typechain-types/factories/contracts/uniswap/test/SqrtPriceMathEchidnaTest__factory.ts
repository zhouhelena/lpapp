/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  SqrtPriceMathEchidnaTest,
  SqrtPriceMathEchidnaTestInterface,
} from "../../../../contracts/uniswap/test/SqrtPriceMathEchidnaTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "getAmount0DeltaEquivalency",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    name: "getAmount0DeltaInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getAmount0DeltaSignedInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    name: "getAmount1DeltaInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getAmount1DeltaSignedInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtLower",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtCurrent",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtUpper",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getInRangeMintInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "add",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromAmount0RoundingUpInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "add",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromAmount1RoundingDownInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromInputInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromOutputInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtA",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtB",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getOutOfRangeMintInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    name: "mulDivRoundingUpInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061103c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638e13a4b911610081578063b712c47c1161005b578063b712c47c14610305578063c8569d881461033e578063f157fb501461037e576100d4565b80638e13a4b914610242578063b29f199e14610289578063b46e6714146102c2576100d4565b806339933d51116100b257806339933d51146101a15780633d729147146101e05780636e6238d714610209576100d4565b80631faf4a39146100d957806321e14f8b1461011e5780633001e65e14610161575b600080fd5b61011c600480360360808110156100ef57600080fd5b506001600160a01b03813516906001600160801b03602082013516906040810135906060013515156103c1565b005b61011c6004803603608081101561013457600080fd5b506001600160a01b03813516906001600160801b0360208201351690604081013590606001351515610447565b61011c6004803603606081101561017757600080fd5b5080356001600160a01b0390811691602081013590911690604001356001600160801b03166104e6565b61011c600480360360808110156101b757600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135600f0b610573565b61011c600480360360608110156101f657600080fd5b508035906020810135906040013561062f565b61011c6004803603606081101561021f57600080fd5b506001600160a01b03813581169160208101359091169060400135600f0b6106a1565b61011c6004803603608081101561025857600080fd5b506001600160a01b0381358116916020810135909116906001600160801b0360408201351690606001351515610749565b61011c6004803603606081101561029f57600080fd5b506001600160a01b03813581169160208101359091169060400135600f0b61084e565b61011c600480360360808110156102d857600080fd5b506001600160a01b03813516906001600160801b0360208201351690604081013590606001351515610886565b61011c6004803603606081101561031b57600080fd5b506001600160a01b03813581169160208101359091169060400135600f0b610900565b61011c6004803603606081101561035457600080fd5b5080356001600160a01b0390811691602081013590911690604001356001600160801b0316610997565b61011c6004803603608081101561039457600080fd5b506001600160a01b03813516906001600160801b0360208201351690604081013590606001351515610a06565b60006103cf85858585610a93565b9050811561040e57846001600160a01b0316816001600160a01b031611156103f357fe5b6104008186866001610aef565b83101561040957fe5b610440565b846001600160a01b0316816001600160a01b0316101561042a57fe5b6104378582866001610bac565b83101561044057fe5b5050505050565b6000846001600160a01b03161161045d57600080fd5b6000836001600160801b03161161047357600080fd5b600061048185858585610c17565b905081156104aa57846001600160a01b0316816001600160a01b031610156104a557fe5b6104c6565b846001600160a01b0316816001600160a01b031611156104c657fe5b8261044057806001600160a01b0316856001600160a01b03161461044057fe5b6000836001600160a01b031611801561050857506000826001600160a01b0316115b61051157600080fd5b60006105208385846000610aef565b905061052f8484846000610aef565b811461053757fe5b60006105468486856001610aef565b90506105558585856001610aef565b811461055d57fe5b8082111561056757fe5b60028282031061044057fe5b6000846001600160a01b03161161058957600080fd5b816001600160a01b0316846001600160a01b0316106105a757600080fd5b826001600160a01b0316846001600160a01b0316111580156105db5750816001600160a01b0316836001600160a01b031611155b6105e457600080fd5b600081600f0b136105f457600080fd5b6000610601848484610cf8565b90506000610610868685610d3f565b905060008213806106215750600081135b61062757fe5b505050505050565b6000811161063c57600080fd5b6000610649848484610d6e565b90506000610658858585610e1d565b90508181101561066457fe5b60028282031061067057fe5b8181036001141561068f576000838061068557fe5b8587091161040957fe5b828061069757fe5b8486091561044057fe5b6000836001600160a01b03161180156106c357506000826001600160a01b0316115b6106cc57600080fd5b60006106d9848484610d3f565b9050600082600f0b12156106f25760008113156106f257fe5b600082600f0b131561072f57826001600160a01b0316846001600160a01b0316141561072557801561072057fe5b61072f565b6000811361072f57fe5b81600f0b6000141561074357801561074357fe5b50505050565b826001600160a01b0316846001600160a01b0316101561076857600080fd5b6000846001600160a01b031611801561078a57506000836001600160a01b0316115b61079357600080fd5b826001600160a01b0316846001600160a01b03168486026001600160a01b0316816107ba57fe5b046001600160a01b0316146107ce57600080fd5b7bffffffffffffffffffffffffffffffff000000000000000000000000606083901b166001600160a01b038486038116908087169086160260008461081d57610818848484610d6e565b610828565b610828848484610e1d565b90506000610838888a8989610aef565b905080821461084357fe5b505050505050505050565b6000836001600160a01b031611801561087057506000826001600160a01b0316115b61087957600080fd5b60006106d9838584610cf8565b6000846001600160a01b03161161089c57600080fd5b6000836001600160801b0316116108b257600080fd5b60006108c085858585610e57565b905081156108e457846001600160a01b0316816001600160a01b031611156104a557fe5b846001600160a01b0316816001600160a01b031610156104c657fe5b6000836001600160a01b031611801561092257506000826001600160a01b0316115b61092b57600080fd5b600081600f0b1361093b57600080fd5b6000610948848484610cf8565b90506000610957858585610d3f565b9050836001600160a01b0316856001600160a01b0316141561098357811561097b57fe5b801561040957fe5b6000821361098d57fe5b6000811361044057fe5b6000836001600160a01b03161180156109b957506000826001600160a01b0316115b6109c257600080fd5b60006109d18484846000610bac565b90506109e08385846000610bac565b81146109e857fe5b60006109f78585856001610bac565b90506105558486856001610bac565b6000610a1485858585610f4c565b90508115610a4e57846001600160a01b0316816001600160a01b03161115610a3857fe5b610a458186866000610bac565b83111561040957fe5b6000816001600160a01b031611610a6157fe5b846001600160a01b0316816001600160a01b03161015610a7d57fe5b610a8a8582866000610aef565b83111561044057fe5b600080856001600160a01b031611610aaa57600080fd5b6000846001600160801b031611610ac057600080fd5b81610ad757610ad28585856001610c17565b610ae4565b610ae48585856001610e57565b90505b949350505050565b6000836001600160a01b0316856001600160a01b03161115610b0f579293925b7bffffffffffffffffffffffffffffffff000000000000000000000000606084901b166001600160a01b038686038116908716610b4b57600080fd5b83610b7b57866001600160a01b0316610b6e8383896001600160a01b0316610d6e565b81610b7557fe5b04610ba1565b610ba1610b928383896001600160a01b0316610e1d565b886001600160a01b0316610f98565b979650505050505050565b6000836001600160a01b0316856001600160a01b03161115610bcc579293925b81610bf457610ad2836001600160801b03168686036001600160a01b0316600160601b610d6e565b610ae4836001600160801b03168686036001600160a01b0316600160601b610e1d565b60008115610c8a5760006001600160a01b03841115610c4d57610c4884600160601b876001600160801b0316610d6e565b610c65565b6001600160801b038516606085901b81610c6357fe5b045b9050610c82610c7d6001600160a01b03881683610fa3565b610fb9565b915050610ae7565b60006001600160a01b03841115610cb857610cb384600160601b876001600160801b0316610e1d565b610ccf565b610ccf606085901b6001600160801b038716610f98565b905080866001600160a01b031611610ce657600080fd5b6001600160a01b038616039050610ae7565b60008082600f0b12610d1e57610d19610d148585856001610aef565b610fd4565b610d35565b610d31610d148585856000036000610aef565b6000035b90505b9392505050565b60008082600f0b12610d5b57610d19610d148585856001610bac565b610d31610d148585856000036000610bac565b6000808060001985870986860292508281109083900303905080610da45760008411610d9957600080fd5b508290049050610d38565b808411610db057600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000610e2a848484610d6e565b905060008280610e3657fe5b8486091115610d38576000198110610e4d57600080fd5b6001019392505050565b600082610e65575083610ae7565b7bffffffffffffffffffffffffffffffff000000000000000000000000606085901b168215610f05576001600160a01b03861684810290858281610ea557fe5b041415610ed657818101828110610ed457610eca83896001600160a01b031683610e1d565b9350505050610ae7565b505b610efc82610ef7878a6001600160a01b03168681610ef057fe5b0490610fa3565b610f98565b92505050610ae7565b6001600160a01b03861684810290858281610f1c57fe5b04148015610f2957508082115b610f3257600080fd5b808203610eca610c7d846001600160a01b038b1684610e1d565b600080856001600160a01b031611610f6357600080fd5b6000846001600160801b031611610f7957600080fd5b81610f8b57610ad28585856000610e57565b610ae48585856000610c17565b808204910615150190565b80820182811015610fb357600080fd5b92915050565b806001600160a01b0381168114610fcf57600080fd5b919050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061100257600080fd5b509056fea26469706673582212207ea9d0e2e6e80f5487d225542dd90e6a958c9f8feb9c49880924a899736f4fdb64736f6c63430007060033";

type SqrtPriceMathEchidnaTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SqrtPriceMathEchidnaTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SqrtPriceMathEchidnaTest__factory extends ContractFactory {
  constructor(...args: SqrtPriceMathEchidnaTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SqrtPriceMathEchidnaTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SqrtPriceMathEchidnaTest__factory {
    return super.connect(runner) as SqrtPriceMathEchidnaTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SqrtPriceMathEchidnaTestInterface {
    return new Interface(_abi) as SqrtPriceMathEchidnaTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SqrtPriceMathEchidnaTest {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SqrtPriceMathEchidnaTest;
  }
}
