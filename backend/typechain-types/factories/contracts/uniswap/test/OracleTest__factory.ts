/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  OracleTest,
  OracleTestInterface,
} from "../../../../contracts/uniswap/test/OracleTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "by",
        type: "uint32",
      },
    ],
    name: "advanceTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "advanceTimeBy",
            type: "uint32",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
        ],
        internalType: "struct OracleTest.UpdateParams[]",
        name: "params",
        type: "tuple[]",
      },
    ],
    name: "batchUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cardinality",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cardinalityNext",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "getGasCostOfObserve",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_cardinalityNext",
        type: "uint16",
      },
    ],
    name: "grow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "index",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "time",
            type: "uint32",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
        ],
        internalType: "struct OracleTest.InitializeParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidity",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "observations",
    outputs: [
      {
        internalType: "uint32",
        name: "blockTimestamp",
        type: "uint32",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulativeX128",
        type: "uint160",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tick",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "time",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "advanceTimeBy",
            type: "uint32",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
        ],
        internalType: "struct OracleTest.UpdateParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "update",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061162b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063761eb23e1161008c578063daf50f6b11610066578063daf50f6b146101eb578063dbffe9ad146101fe578063dd158c1814610206578063f7fd2cfa1461020e576100ea565b8063761eb23e146101a4578063883bdbfd146101b7578063d81740db146101d8576100ea565b80632986c0e5116100c85780632986c0e5146101455780633eaf5d9f1461015a57806365829dc51461016f57806374e69cef14610184576100ea565b806316ada547146100ef5780631a6865021461010d578063252c09d714610122575b600080fd5b6100f7610221565b60405161010491906115b3565b60405180910390f35b61011561022e565b6040516101049190611587565b610135610130366004611480565b610249565b60405161010494939291906115c4565b61014d61028f565b604051610104919061159b565b61016261029f565b6040516101049190611542565b61018261017d36600461141c565b6102b1565b005b61019761019236600461139e565b6103c5565b60405161010491906115aa565b6101826101b236600461145e565b610464565b6101ca6101c536600461139e565b61049f565b6040516101049291906114bc565b6101826101e636600461132e565b610537565b6101826101f936600461141c565b6106c5565b61014d6107f7565b61014d610807565b61018261021c366004611498565b610817565b61ffff5463ffffffff1681565b61ffff5467010000000000000090046001600160801b031681565b60008161ffff811061025a57600080fd5b015463ffffffff81169150640100000000810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b61ffff8054600160b81b90041681565b61ffff54640100000000900460020b81565b6102c161021c6020830183611498565b61ffff805461031c91600091600160b81b810482169163ffffffff80831692640100000000810460020b926001600160801b0367010000000000000083041692600160c81b8304821692600160d81b90049091169061083916565b61ffff8054928116600160b81b0261ffff60b81b19928216600160c81b0261ffff60c81b19909416939093179190911691909117905561036260408201602083016113fb565b61ffff805460029290920b62ffffff166401000000000266ffffff000000001990921691909117905561039b6060820160408301611437565b61ffff60076101000a8154816001600160801b0302191690836001600160801b0316021790555050565b61ffff805460009163ffffffff821691640100000000810460020b916001600160801b0367010000000000000083041691600160b81b900416845a905061045485898980806020026020016040519081016040528093929190818152602001838360200280828437600092018290525061ffff805491969594508b93508992508a91600160c81b9004166109ef565b50505a9003979650505050505050565b61ffff805461047e91600091600160d81b90041683610b49565b61ffff8054918116600160d81b0261ffff60d81b1990921691909117905550565b60608061052c61ffff60009054906101000a900463ffffffff16858580806020026020016040519081016040528093929190818152602001838360200280828437600092018290525061ffff80549196959450640100000000820460020b9350600160b81b8204811692506001600160801b0367010000000000000083041691600160c81b9004166109ef565b915091509250929050565b61ffff8054640100000000810460020b916001600160801b0367010000000000000083041691600160b81b8104821691600160c81b8204811691600160d81b81049091169063ffffffff1660005b8781101561061c5788888281811061059957fe5b6105af9260206060909202019081019150611498565b909101906105c3600086848a8a8989610839565b90955093508888828181106105d457fe5b90506060020160200160208101906105ec91906113fb565b96508888828181106105fa57fe5b90506060020160400160208101906106129190611437565b9550600101610585565b5061ffff805463ffffffff90921663ffffffff19948216600160c81b0261ffff60c81b19968316600160b81b0261ffff60b81b196001600160801b039099166701000000000000000276ffffffffffffffffffffffffffffffff000000000000001960029b909b0b62ffffff166401000000000266ffffff0000000019909616959095179990991693909317969096169690961793909316929092171691909117909155505050565b61ffff8054600160c81b900416156106f85760405162461bcd60e51b81526004016106ef90611550565b60405180910390fd5b6107056020820182611498565b61ffff805463ffffffff191663ffffffff9290921691909117905561073060408201602083016113fb565b61ffff805460029290920b62ffffff166401000000000266ffffff00000000199092169190911790556107696060820160408301611437565b61ffff80546001600160801b03929092166701000000000000000276ffffffffffffffffffffffffffffffff00000000000000199092169190911790556107be6107b66020830183611498565b600090610bef565b61ffff8054928116600160c81b0261ffff60c81b19928216600160d81b0261ffff60d81b19909416939093179190911691909117905550565b61ffff8054600160c81b90041681565b61ffff8054600160d81b90041681565b61ffff805463ffffffff19811663ffffffff9182169390930116919091179055565b6000806000898961ffff1661ffff811061084f57fe5b60408051608081018252919092015463ffffffff8082168084526401000000008304600690810b810b900b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff1615156060830152909250891614156108bf57888592509250506109e3565b8461ffff168461ffff161180156108e057506001850361ffff168961ffff16145b156108ed578391506108f1565b8491505b8161ffff168960010161ffff168161090557fe5b06925061091481898989610c3b565b8a8461ffff1661ffff811061092557fe5b825191018054602084015160408501516060909501511515600160f81b027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001600160a01b03909616600160581b027fff0000000000000000000000000000000000000000ffffffffffffffffffffff60069390930b66ffffffffffffff16640100000000026affffffffffffff000000001963ffffffff90971663ffffffff19909516949094179590951692909217169290921792909216179055505b97509795505050505050565b60608060008361ffff1611610a2f576040805162461bcd60e51b81526020600482015260016024820152604960f81b604482015290519081900360640190fd5b865167ffffffffffffffff81118015610a4757600080fd5b50604051908082528060200260200182016040528015610a71578160200160208202803683370190505b509150865167ffffffffffffffff81118015610a8c57600080fd5b50604051908082528060200260200182016040528015610ab6578160200160208202803683370190505b50905060005b8751811015610b3c57610ae78a8a8a8481518110610ad657fe5b60200260200101518a8a8a8a610ceb565b848381518110610af357fe5b60200260200101848481518110610b0657fe5b60200260200101826001600160a01b03166001600160a01b03168152508260060b60060b81525050508080600101915050610abc565b5097509795505050505050565b6000808361ffff1611610b87576040805162461bcd60e51b81526020600482015260016024820152604960f81b604482015290519081900360640190fd5b8261ffff168261ffff1611610b9d575081610be8565b825b8261ffff168161ffff161015610be3576001858261ffff1661ffff8110610bc257fe5b01805463ffffffff191663ffffffff92909216919091179055600101610b9f565b508190505b9392505050565b6040805160808101825263ffffffff9283168082526000602083018190529282019290925260016060909101819052835463ffffffff1916909117909116600160f81b17909155908190565b610c436112f0565b600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856001600160801b031611610c97576001610c99565b845b6001600160801b031673ffffffff00000000000000000000000000000000608085901b1681610cc457fe5b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b60008063ffffffff8716610d92576000898661ffff1661ffff8110610d0c57fe5b60408051608081018252919092015463ffffffff8082168084526401000000008304600690810b810b900b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a1614610d7e57610d7b818a8988610c3b565b90505b8060200151816040015192509250506109e3565b868803600080610da78c8c858c8c8c8c610e76565b91509150816000015163ffffffff168363ffffffff161415610dd95781602001518260400151945094505050506109e3565b805163ffffffff84811691161415610e015780602001518160400151945094505050506109e3565b8151815160208085015190840151918390039286039163ffffffff80841692908516910360060b81610e2f57fe5b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b03160281610e6157fe5b048560400151019650965050505050506109e3565b610e7e6112f0565b610e866112f0565b888561ffff1661ffff8110610e9757fe5b60408051608081018252919092015463ffffffff81168083526401000000008204600690810b810b900b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff16151560608201529250610efc9089908961108d565b15610f34578663ffffffff16826000015163ffffffff161415610f1e576109e3565b81610f2b83898988610c3b565b915091506109e3565b888361ffff168660010161ffff1681610f4957fe5b0661ffff1661ffff8110610f5957fe5b60408051608081018252929091015463ffffffff811683526401000000008104600690810b810b900b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b9091041615156060820181905290925061101057604080516080810182528a5463ffffffff811682526401000000008104600690810b810b900b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b61101f8883600001518961108d565b611070576040805162461bcd60e51b815260206004820152600360248201527f4f4c440000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61107d8989898887611150565b9150915097509795505050505050565b60008363ffffffff168363ffffffff16111580156110b757508363ffffffff168263ffffffff1611155b156110d3578163ffffffff168363ffffffff1611159050610be8565b60008463ffffffff168463ffffffff16116110fb578363ffffffff1664010000000001611103565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff1611611134578363ffffffff166401000000000161113c565b8363ffffffff165b64ffffffffff169091111595945050505050565b6111586112f0565b6111606112f0565b60008361ffff168560010161ffff168161117657fe5b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff871682816111a357fe5b0661ffff81106111af57fe5b60408051608081018252929091015463ffffffff811683526401000000008104600690810b810b900b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b9091041615156060820181905290955061121a5780600101925061118e565b898661ffff16826001018161122b57fe5b0661ffff811061123757fe5b60408051608081018252929091015463ffffffff811683526401000000008104600690810b810b900b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082015285519094506000906112a2908b908b61108d565b90508080156112bb57506112bb8a8a876000015161108d565b156112c657506112e3565b806112d6576001820392506112dd565b8160010193505b5061118e565b5050509550959350505050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b600060608284031215611328578081fd5b50919050565b60008060208385031215611340578182fd5b823567ffffffffffffffff80821115611357578384fd5b818501915085601f83011261136a578384fd5b813581811115611378578485fd5b86602060608302850101111561138c578485fd5b60209290920196919550909350505050565b600080602083850312156113b0578182fd5b823567ffffffffffffffff808211156113c7578384fd5b818501915085601f8301126113da578384fd5b8135818111156113e8578485fd5b866020808302850101111561138c578485fd5b60006020828403121561140c578081fd5b81358060020b8114610be8578182fd5b60006060828403121561142d578081fd5b610be88383611317565b600060208284031215611448578081fd5b81356001600160801b0381168114610be8578182fd5b60006020828403121561146f578081fd5b813561ffff81168114610be8578182fd5b600060208284031215611491578081fd5b5035919050565b6000602082840312156114a9578081fd5b813563ffffffff81168114610be8578182fd5b604080825283519082018190526000906020906060840190828701845b828110156114f857815160060b845292840192908401906001016114d9565b50505083810382850152845180825285830191830190845b818110156115355783516001600160a01b031683529284019291840191600101611510565b5090979650505050505050565b60029190910b815260200190565b60208082526013908201527f616c726561647920696e697469616c697a656400000000000000000000000000604082015260600190565b6001600160801b0391909116815260200190565b61ffff91909116815260200190565b90815260200190565b63ffffffff91909116815260200190565b63ffffffff94909416845260069290920b60208401526001600160a01b03166040830152151560608201526080019056fea26469706673582212206d634e93170ad5af77b690f322c5df3c4fc8644feb2211d45efe067419f41b5764736f6c63430007060033";

type OracleTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleTest__factory extends ContractFactory {
  constructor(...args: OracleTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OracleTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OracleTest__factory {
    return super.connect(runner) as OracleTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleTestInterface {
    return new Interface(_abi) as OracleTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OracleTest {
    return new Contract(address, _abi, runner) as unknown as OracleTest;
  }
}
