/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  VaultErrors,
  VaultErrorsInterface,
} from "../../../../contracts/range/errors/VaultErrors";

const _abi = [
  {
    inputs: [],
    name: "InvalidBurnAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidManagingFee",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMintAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPerformanceFee",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTicksSpacing",
    type: "error",
  },
  {
    inputs: [],
    name: "LiquidityAlreadyAdded",
    type: "error",
  },
  {
    inputs: [],
    name: "MintNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "MintNotStarted",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAllowedToUpdateTicks",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyFactoryAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyPoolAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "SlippageExceedThreshold",
    type: "error",
  },
  {
    inputs: [],
    name: "TicksOutOfRange",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroManagerAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroMintAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroUnderlyingBalance",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202f1514deb9f83a8da30762181751446ca8c41cd3b282dd73d8c93c74c7f0d42a64736f6c63430008140033";

type VaultErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultErrors__factory extends ContractFactory {
  constructor(...args: VaultErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      VaultErrors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VaultErrors__factory {
    return super.connect(runner) as VaultErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultErrorsInterface {
    return new Interface(_abi) as VaultErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): VaultErrors {
    return new Contract(address, _abi, runner) as unknown as VaultErrors;
  }
}
